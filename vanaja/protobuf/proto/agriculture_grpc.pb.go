// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: agriculture.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageClassificationServiceClient is the client API for ImageClassificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClassificationServiceClient interface {
	// Bidirectional streaming RPC
	ClassifyImage(ctx context.Context, opts ...grpc.CallOption) (ImageClassificationService_ClassifyImageClient, error)
}

type imageClassificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClassificationServiceClient(cc grpc.ClientConnInterface) ImageClassificationServiceClient {
	return &imageClassificationServiceClient{cc}
}

func (c *imageClassificationServiceClient) ClassifyImage(ctx context.Context, opts ...grpc.CallOption) (ImageClassificationService_ClassifyImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageClassificationService_ServiceDesc.Streams[0], "/agriculture_service.ImageClassificationService/ClassifyImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageClassificationServiceClassifyImageClient{stream}
	return x, nil
}

type ImageClassificationService_ClassifyImageClient interface {
	Send(*ImageData) error
	Recv() (*ClassificationResults, error)
	grpc.ClientStream
}

type imageClassificationServiceClassifyImageClient struct {
	grpc.ClientStream
}

func (x *imageClassificationServiceClassifyImageClient) Send(m *ImageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageClassificationServiceClassifyImageClient) Recv() (*ClassificationResults, error) {
	m := new(ClassificationResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageClassificationServiceServer is the server API for ImageClassificationService service.
// All implementations must embed UnimplementedImageClassificationServiceServer
// for forward compatibility
type ImageClassificationServiceServer interface {
	// Bidirectional streaming RPC
	ClassifyImage(ImageClassificationService_ClassifyImageServer) error
	mustEmbedUnimplementedImageClassificationServiceServer()
}

// UnimplementedImageClassificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageClassificationServiceServer struct {
}

func (UnimplementedImageClassificationServiceServer) ClassifyImage(ImageClassificationService_ClassifyImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ClassifyImage not implemented")
}
func (UnimplementedImageClassificationServiceServer) mustEmbedUnimplementedImageClassificationServiceServer() {
}

// UnsafeImageClassificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageClassificationServiceServer will
// result in compilation errors.
type UnsafeImageClassificationServiceServer interface {
	mustEmbedUnimplementedImageClassificationServiceServer()
}

func RegisterImageClassificationServiceServer(s grpc.ServiceRegistrar, srv ImageClassificationServiceServer) {
	s.RegisterService(&ImageClassificationService_ServiceDesc, srv)
}

func _ImageClassificationService_ClassifyImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageClassificationServiceServer).ClassifyImage(&imageClassificationServiceClassifyImageServer{stream})
}

type ImageClassificationService_ClassifyImageServer interface {
	Send(*ClassificationResults) error
	Recv() (*ImageData, error)
	grpc.ServerStream
}

type imageClassificationServiceClassifyImageServer struct {
	grpc.ServerStream
}

func (x *imageClassificationServiceClassifyImageServer) Send(m *ClassificationResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageClassificationServiceClassifyImageServer) Recv() (*ImageData, error) {
	m := new(ImageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageClassificationService_ServiceDesc is the grpc.ServiceDesc for ImageClassificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageClassificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agriculture_service.ImageClassificationService",
	HandlerType: (*ImageClassificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClassifyImage",
			Handler:       _ImageClassificationService_ClassifyImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agriculture.proto",
}
