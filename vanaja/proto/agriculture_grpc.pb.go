// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/agriculture.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgricultureService_AnalyzePatterns_FullMethodName = "/agriculture_service.AgricultureService/AnalyzePatterns"
)

// AgricultureServiceClient is the client API for AgricultureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgricultureServiceClient interface {
	AnalyzePatterns(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgricultureData, AnalysisResult], error)
}

type agricultureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgricultureServiceClient(cc grpc.ClientConnInterface) AgricultureServiceClient {
	return &agricultureServiceClient{cc}
}

func (c *agricultureServiceClient) AnalyzePatterns(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgricultureData, AnalysisResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgricultureService_ServiceDesc.Streams[0], AgricultureService_AnalyzePatterns_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgricultureData, AnalysisResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgricultureService_AnalyzePatternsClient = grpc.BidiStreamingClient[AgricultureData, AnalysisResult]

// AgricultureServiceServer is the server API for AgricultureService service.
// All implementations must embed UnimplementedAgricultureServiceServer
// for forward compatibility.
type AgricultureServiceServer interface {
	AnalyzePatterns(grpc.BidiStreamingServer[AgricultureData, AnalysisResult]) error
	mustEmbedUnimplementedAgricultureServiceServer()
}

// UnimplementedAgricultureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgricultureServiceServer struct{}

func (UnimplementedAgricultureServiceServer) AnalyzePatterns(grpc.BidiStreamingServer[AgricultureData, AnalysisResult]) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzePatterns not implemented")
}
func (UnimplementedAgricultureServiceServer) mustEmbedUnimplementedAgricultureServiceServer() {}
func (UnimplementedAgricultureServiceServer) testEmbeddedByValue()                            {}

// UnsafeAgricultureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgricultureServiceServer will
// result in compilation errors.
type UnsafeAgricultureServiceServer interface {
	mustEmbedUnimplementedAgricultureServiceServer()
}

func RegisterAgricultureServiceServer(s grpc.ServiceRegistrar, srv AgricultureServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgricultureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgricultureService_ServiceDesc, srv)
}

func _AgricultureService_AnalyzePatterns_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgricultureServiceServer).AnalyzePatterns(&grpc.GenericServerStream[AgricultureData, AnalysisResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgricultureService_AnalyzePatternsServer = grpc.BidiStreamingServer[AgricultureData, AnalysisResult]

// AgricultureService_ServiceDesc is the grpc.ServiceDesc for AgricultureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgricultureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agriculture_service.AgricultureService",
	HandlerType: (*AgricultureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AnalyzePatterns",
			Handler:       _AgricultureService_AnalyzePatterns_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/agriculture.proto",
}
